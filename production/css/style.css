    /*---------------------OUTER SECTIONS-------------------*/
    /* You need to set html & body to 100% for elements in the page to correctly inherit sizes from their parents
    also removing and margin & padding*/

    html,
    body {
        height: 100%;
        width: 100%;
        margin: 0;
        padding: 0;
    }
    /* setting the font family to the google imported Lato with fallbacks to helvetica, arial, sans-serif.
    also ensuring background color is white*/

    body {
        font-family: 'Lato', 'Helvetica', 'Arial', sans-serif;
        background-color: rgb(255, 255, 255);
    }
    /* the pagewrapper is set to 100vh which represents 100% viewport height, its display is set to flex with direction column
    meaning its childs will take flex-child properties, which is important as the flexbox child property 'flex:1' is used on the page-main element,
    this pushes the footer down to the bottom of the page, the different versions of the properties 'webkit,ms,..' represents cross browser compatability.*/

    .page-wrapper {
        min-height: 100vh;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-direction: column;
        -ms-flex-direction: column;
        flex-direction: column;
    }
    /* the pager header is set to 100% width and is set to fix to the top of the page with a z-index: 99999 and height:50px,
    what this does is that it ensures that the header will always appear on top of the rest of the contents when scrolling down/up the page.
    Also including some shadows and borders on the element*/

    .page-header {
        width: 100%;
        position: fixed;
        z-index: 99999;
        top: 0;
        height: 50px;
        background-color: rgb(255, 255, 255);
        border-bottom: 1px solid rgb(220, 220, 220);
        box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.1);
    }
    /* Im offsetting the main content areas with the 50px in padding top to ensure that the header & main contents dont overlap when you're at the top of the screen.
    also forcing some paddings on bottom and sides. Giving the element display flex & flex-wrap:wrap to give its children the flexbox child properties and
    telling them to wrap down under each other if there is no space the Flex:1 property makes the page-main element take up any remaining space in the page-wrapper element.
    Becuase the pagewrapper was set to 100vh, this ensures that if there is not enough content in the child elements of the page-wrapper then page-main will extend.*/

    .page-main {
        padding: 50px 10px 5px 10px;
        margin-left: auto;
        margin-right: auto;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        /* push footer down */
        -webkit-flex: 1;
        -ms-flex: 1;
        flex: 1;
        background-color: rgb(255, 255, 255);
    }
    /* the page footer is set with position:relative, but because page-main will always extend so that the child of pagewrapper atleast fills 100vh then page-footer will always
    appear at the bottom of the page.*/

    .page-footer {
        width: 100%;
        height: 50px;
        position: relative;
        bottom: 0;
        background-color: rgb(255, 255, 255);
        border-top: 1px solid rgb(220, 220, 220);
    }
    /*---------------------GENERIC DOM STYLING-------------*/
    /* in general i like to set margins & paddings, therefor i first remove any default ones as seen in the below elements */

    footer {
        margin: 0 0 0 0;
        padding: 0 0 0 0;
    }

    figure {
        margin: 0 0 0 0;
        padding: 0 0 0 0;
    }
    /* setting list-style-type to circle and specifying some paddings (for the navbar & ratings these settings are overwritten later)*/

    ul {
        list-style-type: circle;
        padding: 5px 5px 5px 20px;
        margin: 0 0 0 0;
    }
    /* setting paddings on oderet lists and removing margins */

    ol {
        padding: 5px 5px 5px 15px;
        margin: 0 0 0 0;
    }
    /* adding margin between list items to 5px and setting font size to 14px*/

    li {
        margin: 5px;
        font-size: 14px;
    }
    /* setting max-width & max-height of all pictures on the page to 100%
    Pictures loose quality when scaled up, so this ensures that i see if pictures are too small. To handle such cases im using a grunt build tool to create different size version
    of the different pictures and telling the browser which one to download at different viewport widths*/

    img {
        max-width: 100%;
        max-height: 100%;
    }
    /* setting styling of horizontal rules to be a 1px line that spans its parent element with a lightgrey color*/

    hr {
        border: 0;
        height: 1px;
        background: rgb(220, 220, 220);
        width: 100%;
    }
    /* removing text-decoration from links. Much like margins & paddings i like to set link stylings, therefor i remove any defaults */

    a,
    a:visited,
    a:active,
    a:hover {
        text-decoration: none;
    }
    /* removing margin from paragraphs and adding 5px padding and settting font size to 14px */

    p {
        margin: 0 0 0 0;
        padding: 5px;
        font-size: 14px;
    }
    /* remove margin & padding on headers and align center, its supposed to be the most standard case that is defined here directly on the generic dom elements
    but im not sure if this is the case anymore. Anyways alot of headers are left aligned in the more specific element stylings. */

    h1,
    h2,
    h3 {
        margin: 0 0 0 0;
        padding: 0 0 0 0;
        text-align: center;
    }
    /* the h4 is often used more closely with paragraph elements and as such is given the same padding */

    h4 {
        margin: 0 0 0 0;
        padding: 5px;
    }
    /*---------------------PAGE:HEADER-------------------*/
    /* set the navbar links to display inlink-block with center alignment and black color. Creating round edges around the element*/

    .navigation a {
        display: inline-block;
        text-align: center;
        color: rgb(0, 0, 0);
        padding-left: 10px;
        padding-right: 10px;
        border-radius: 10px;
    }
    /* when hovering a navigation link element change background color*/

    .navigation a:hover {
        background-color: rgb(232, 243, 248);
    }
    /* the current page navigation link has some border around it*/

    .navigation .active {
        border: 1px solid rgb(232, 243, 248);
    }
    /* The unordered navigation list is set to display-flex, you could achieve the same through other methods but since i'm using flexbox to place content on this site
    in general i'll continue with that trend here, justify content makes ul's child elements grow from the middle (align center). Removing the list-style-type styling.*/

    .navigation ul {
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-justify-content: center;
        -ms-flex-pack: center;
        justify-content: center;
        margin: 0;
        padding: 0;
        list-style-type: none;
    }
    /*the height of the list items is set to the header height with a line-height of 40px and padding of 5 placing it in the middle of the header vertically*/

    .navigation li {
        height: 50px;
        line-height: 40px;
        padding: 5px;
        margin: 0;
    }
    /*The work in progress container is centered on the page*/
    /*---------------------MAIN PAGE SECTIONS-------------------*/
    .wip-container {
        margin: auto;
    }
    /* the container used for the about & contact page is set to center horizontally and with a max-width of 800px aand some additional padding to the headerpane */

    .container {
        margin-left: auto;
        margin-right: auto;
        max-width: 800px;
        padding-top: 20px;
    }
    /* the sub section about me is set to have a margin bottom of 20px to push the about-site section alittle*/

    .about-me {
        margin-bottom: 20px;
    }
    /* the h2 & h1 of the container elements is set to align left with a padding left of 5px */

    .container h2,
    .container h1 {
        text-align: left;
        padding-left: 5px;
    }
    /* the section container is the parent of the entry container elements and as such the display flex and direction row & wrap tells the entry elements to position themselfes
    next to each other as long as there is space, when there is no more space the next element will position itself under this way the number of columns in the section-container
    is controlled through the width of its child elements. As you can see in the media query section at the bottom of this file it is exactly the width sizes of
    flex child elemenets that is being modified to change the structure of the page at different viewport widths*/

    .section-container {
        padding: 10px 0 0 0;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-direction: row;
        -ms-flex-direction: row;
        flex-direction: row;
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    }
    /* gives the entry elements the display:flex, flex-wrap and align-content flex-start properties. This makes the child elements wrap similarly to the childs of the section-container
    but additionally elements are told to float upwards if possible. The entry element is given borders & shadow. The width is calculated as 100% minus the two 1px borders.*/

    .entry {
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        -ms-flex-line-pack: start;
        -webkit-align-content: flex-start;
        align-content: flex-start;
        box-shadow: 0 0 5px 1px rgba(0, 0, 0, 0.1);
        border: 1px solid rgb(220, 220, 220);
        border-radius: 2px;
        width: calc((100% - 1px * 2));
        margin: 0 0px 5px 0;
    }
    /* the food title pane is giving a border radius of 1px so it doesnt overflow the border radius of the entry container.,
    its width is set to 100% and its flex order is set to 0. The flex order rearranges the order of its sibling dom elements. You could achieve the same by moving this sub section
    to the top of its container in the dom element, but after moving stuff around a couple of times it became more maintainable to control it through the order property
    that we convienietly have access to since its parent is set to display:flex*/

    .food-title-pane {
        border-radius: 1px;
        width: 100%;
        -webkit-order: 0;
        -ms-flex-order: 0;
        order: 0;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-direction: row;
        -ms-flex-direction: row;
        flex-direction: row;
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    }
    /*the food title is set to width 100% minus its paddings*/

    .food-title {
        padding: 5px;
        width: calc(100% - 5px * 2);
    }

    /* the food rating list is set to width 100% and display:flex, justify:center,wrap:wrap
    This makes the list items expand from the middle horizontally and if needed the stars will wrap
    down under eachother. List styles are removed*/
    .food-rating {
        width: 100%;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        -webkit-justify-content: center;
        -ms-flex-pack: center;
        justify-content: center;
        list-style-type: none;
        padding: 0;
    }

    /* sets margin 3px between foodrating stars and gives the stars a size corresponding to font-size:20px */
    .food-rating li {
        margin: 3px;
        font-size: 20px;
    }

    /* this class colors the stars black */
    .star-yes {
        color: rgb(0, 0, 0);
    }

    /* this class colors the stars light grey */
    .star-no {
        color: rgb(220, 220, 220);
    }

    /*the entry sub-title sets all subtitles in the entry container to have the below background color, border radius & margin */
    .entry-sub-title {
        background-color: rgb(232, 243, 248);
        border-radius: 5px;
        margin: 5px;
    }
    /*the i element is used for the font-awesome icons, the below floats them to the right in the entry subtitle elements */

    .entry-sub-title i {
        float: right;
        padding: 0 5px 0 0;
    }
    /*one of the subsections of the entry container, width is set to 100% and order is set to 1 */

    .result {
        width: 100%;
        margin: 0;
        padding: 0;
        -webkit-order: 1;
        -ms-flex-order: 1;
        order: 1;
    }
    /* the food figure element that is inside the result container is set to have paddings 5px */

    .food-figure {
        padding: 5px;
    }
    /* the food picture element inside the food-figure container is set to display:block to remove white space below and with border radius 5px */

    .food-pic {
        display: block;
        border-radius: 5px;
    }
    /* the ingredients section is set similarly to the result section to width 100% but order:2*/

    .ingredients {
        width: 100%;
        padding: 0;
        margin: 0;
        -webkit-order: 2;
        -ms-flex-order: 2;
        order: 2;
    }
    /* same as result/ingredients but with order 3*/

    .instructions {
        width: 100%;
        padding: 0;
        margin: 0;
        -webkit-order: 3;
        -ms-flex-order: 3;
        order: 3;
    }
    /* same as result/instructions/ingredients but with order 4*/

    .recipe-comments {
        width: 100%;
        padding: 0;
        margin: 0;
        -webkit-order: 4;
        -ms-flex-order: 4;
        order: 4;
    }
    /*removes any padding from horizontal rulers used inside the entry container */

    .entry hr {
        margin: 0;
        padding: 0;
    }

    /*------------------MEDIA QUERIES------------------------*/
    /*According to best responsive design practices the default styling of the page is mostly according to the small devices.
    In other words without media queries the page will display as it would on mobile devices. This is not entirely true since
    we use default navigational paddings & sizes that are not the mobile versions. But other than that the above CSS represents the mobile version
    and the media queries represents the changes with bigger viewport widths. Keep in mind that the media queries below are not the only thing
    that changes with different viewport widths. The srcset attributes directly on the img dom elements tells the browser to download
    different pictures at different viewport widths.*/

    /* when viewport width is below 601px padding between navigational items and their font size is reduced,
    this ensures that the navigation menu fits on mobile devices */
    @media screen and (max-width:600px) {
        .navigation a {
            padding-left: 2px;
            padding-right: 2px;
        }
        .navigation a h3 {
            font-size: 14px;
        }
    }

    /*between 601 and 800px viewport widths the entry childs result/ingredients/instructions/recipe-comments are set to width 50px;
    making the entry elements child appear in two columns the food title and rating are moved to the same line by reducing width of
    the title to 3/4 of its width minus paddings and the stars is set to 1/4 of its width (no paddings), the stars are also set to
    horizontally place themselfes to the right instead of center*/
    @media screen and (max-width:800px) and (min-width:601px) {
        .result,
        .ingredients,
        .instructions,
        .recipe-comments {
            width: 50%;
        }
        .food-title {
            width: calc((100% - 5px * 2 * 2)*(3/4));
            text-align: left;
        }
        .food-rating {
            width: calc((100%)*(1/4));
            -webkit-justify-content: flex-end;
            -ms-flex-pack: end;
            justify-content: flex-end;
        }
    }

    /* at viewport widths between 801px and 1100px, the entry containers are set to 50% width minuss padings & borders,
    making the main content page appear to have entries displaying in two columns. A margin of 5px is set to the right of each
    entry expect every second entry element which has no right-margin. The entry elements themselfes are also set to two columns
    by setting its childs to width 50%*/
    @media screen and (min-width:801px) and (max-width:1100px) {
        .entry {
            width: calc((100% - 1px * 2 * 2 - 5px * 1)/2);
            margin: 0 5px 5px 0;
        }
        .entry:nth-of-type(2n) {
            margin: 0 0 5px 0;
        }
        .result,
        .ingredients,
        .instructions,
        .recipe-comments {
            width: 50%;
        }
    }

    /* the only difference between this media query and the one between 801px and 1100px is that there is now space to move
    the food title and food rating onto the same line */
    @media screen and (min-width:1101px) and (max-width:1500px) {
        .entry {
            width: calc((100% - 1px * 2 * 2 - 5px * 1)/2);
            margin: 0 5px 5px 0;
        }
        .entry:nth-of-type(2n) {
            margin: 0 0 5px 0;
        }
        .result,
        .ingredients,
        .instructions,
        .recipe-comments {
            width: 50%;
        }
        .food-title {
            width: calc((100% - 5px * 2 * 2)*(3/4));
            text-align: left;
        }
        .food-rating {
            width: calc((100%)*(1/4));
            -webkit-justify-content: flex-end;
            -ms-flex-pack: end;
            justify-content: flex-end;
        }
    }

    /*At viewport width sizes above 1501px the main content area becomes 3 columns by setting width of entry elements
    to 1/3 of 100% minus margins & borders. Every third entry element has no right margin */
    @media screen and (min-width:1501px) {
        .entry {
            width: calc((100% - 5px * 2 - 1px * 2 * 3)*(1/3));
            margin: 0 5px 5px 0;
        }
        .entry:nth-of-type(3n) {
            margin: 0 0 5px 0;
        }
        .result,
        .ingredients,
        .instructions,
        .recipe-comments {
            width: 50%;
        }
        .food-title {
            width: calc((100% - 5px * 2 * 2)*(3/4));
            text-align: left;
        }
        .food-rating {
            width: calc((100%)*(1/4));
            -webkit-justify-content: flex-end;
            -ms-flex-pack: end;
            justify-content: flex-end;
        }
    }
